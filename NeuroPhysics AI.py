{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "749487c6-23dc-49b3-98df-511f86cb2892",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'streamlit'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mst\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msympy\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m symbols, Eq, solve, sympify\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtransformers\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m pipeline\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "from sympy import symbols, Eq, solve, sympify\n",
    "from transformers import pipeline\n",
    "import re\n",
    "import math\n",
    "\n",
    "st.set_page_config(\n",
    "    page_title=\"IA Matem√°tica y F√≠sica\",\n",
    "    layout=\"centered\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "st.title(\" NeuroPhysics AI\")\n",
    "\n",
    "st.markdown(\"Esta app resuelve problemas de √°lgebra y entiende enunciados de f√≠sica para darte respuestas num√©ricas.\")\n",
    "\n",
    "x = symbols('x')\n",
    "\n",
    "@st.cache_resource\n",
    "def load_qa_pipeline():\n",
    "    return pipeline(\"question-answering\")\n",
    "\n",
    "qa = load_qa_pipeline()\n",
    "\n",
    "def extraer_valores(texto):\n",
    "    valores = {}\n",
    "    patrones = {\n",
    "        'v': r\"(\\d+(\\.\\d+)?)\\s*m/s\",\n",
    "        't': r\"(\\d+(\\.\\d+)?)\\s*s\",\n",
    "        'd': r\"(\\d+(\\.\\d+)?)\\s*m(?!/s)\",\n",
    "        'a': r\"(\\d+(\\.\\d+)?)\\s*m/s\\^?2\",\n",
    "        'v_0': r\"velocidad\\s*inicial\\s*de\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'v_f': r\"velocidad\\s*final\\s*de\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'm': r\"(\\d+(\\.\\d+)?)\\s*kg\",\n",
    "        'h': r\"(\\d+(\\.\\d+)?)\\s*m\\s*de\\s*altura\",\n",
    "        'F': r\"(\\d+(\\.\\d+)?)\\s*N\",\n",
    "        'Œ∏': r\"(\\d+(\\.\\d+)?)\\s*¬∞\",\n",
    "        'Œº': r\"Œº\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'k': r\"k\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'x': r\"x\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'x_0': r\"x_0\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'C': r\"C\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'T': r\"T\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'T_0': r\"T_0\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'L': r\"L\\s*=\\s*(\\d+(\\.\\d+)?)\",\n",
    "        'N': r\"N\\s*=\\s*(\\d+(\\.\\d+)?)\"\n",
    "    }\n",
    "    for var, patron in patrones.items():\n",
    "        match = re.search(patron, texto)\n",
    "        if match:\n",
    "            valores[var] = float(match.group(1))\n",
    "    return valores\n",
    "\n",
    "def resolver_mru(val):\n",
    "    pasos = []\n",
    "    d, v, t = val.get('d'), val.get('v'), val.get('t')\n",
    "    if d is None and v is not None and t is not None:\n",
    "        d = v * t\n",
    "        pasos.append(f\"Usamos d = v * t ‚Üí d = {v} * {t} = {d}\")\n",
    "    elif v is None and d is not None and t is not None:\n",
    "        v = d / t\n",
    "        pasos.append(f\"Usamos v = d / t ‚Üí v = {d} / {t} = {v}\")\n",
    "    elif t is None and d is not None and v is not None:\n",
    "        t = d / v\n",
    "        pasos.append(f\"Usamos t = d / v ‚Üí t = {d} / {v} = {t}\")\n",
    "    else:\n",
    "        pasos.append(\"No hay suficientes datos para resolver con MRU\")\n",
    "    return pasos\n",
    "\n",
    "def resolver_mrua(val):\n",
    "    pasos = []\n",
    "    v = val.get('v')\n",
    "    v_0 = val.get('v_0')\n",
    "    a = val.get('a')\n",
    "    t = val.get('t')\n",
    "    d = val.get('d')\n",
    "\n",
    "    if v is None and v_0 is not None and a is not None and t is not None:\n",
    "        v = v_0 + a * t\n",
    "        pasos.append(f\"Usamos v = v‚ÇÄ + a*t ‚Üí v = {v_0} + {a}*{t} = {v}\")\n",
    "    elif d is None and v is not None and v_0 is not None and t is not None:\n",
    "        d = ((v + v_0) / 2) * t\n",
    "        pasos.append(f\"Usamos d = (v + v‚ÇÄ)/2 * t ‚Üí d = ({v} + {v_0})/2 * {t} = {d}\")\n",
    "    elif d is None and v_0 is not None and a is not None and t is not None:\n",
    "        d = v_0 * t + 0.5 * a * t ** 2\n",
    "        pasos.append(f\"Usamos d = v‚ÇÄ*t + (1/2)*a*t¬≤ ‚Üí d = {v_0}*{t} + 0.5*{a}*{t}¬≤ = {d}\")\n",
    "    elif d is None and v is not None and a is not None and t is not None:\n",
    "        d = v * t - 0.5 * a * t ** 2\n",
    "        pasos.append(f\"Usamos d = v*t - (1/2)*a*t¬≤ ‚Üí d = {v}*{t} - 0.5*{a}*{t}¬≤ = {d}\")\n",
    "    elif v is None and v_0 is not None and a is not None and d is not None:\n",
    "        v = (v_0 ** 2 + 2 * a * d) ** 0.5\n",
    "        pasos.append(f\"Usamos v¬≤ = v‚ÇÄ¬≤ + 2*a*d ‚Üí v = ‚àö({v_0}¬≤ + 2*{a}*{d}) = {v}\")\n",
    "    else:\n",
    "        pasos.append(\"No hay suficientes datos para aplicar f√≥rmulas de MRUA\")\n",
    "    return pasos\n",
    "\n",
    "def resolver_extra(val):\n",
    "    pasos = []\n",
    "    if 'F' in val and 'Œ∏' in val:\n",
    "        fx = val['F'] * math.cos(math.radians(val['Œ∏']))\n",
    "        fy = val['F'] * math.sin(math.radians(val['Œ∏']))\n",
    "        pasos.append(f\"fx = F*cos(Œ∏) ‚Üí fx = {val['F']}*cos({val['Œ∏']}) = {fx:.2f} N\")\n",
    "        pasos.append(f\"fy = F*sen(Œ∏) ‚Üí fy = {val['F']}*sen({val['Œ∏']}) = {fy:.2f} N\")\n",
    "    if 'Œº' in val and 'N' in val:\n",
    "        fr = val['Œº'] * val['N']\n",
    "        pasos.append(f\"fr = Œº*N ‚Üí fr = {val['Œº']}*{val['N']} = {fr} N\")\n",
    "    if 'k' in val and 'x' in val and 'x_0' in val:\n",
    "        Fd = val['k'] * (val['x'] - val['x_0'])\n",
    "        pasos.append(f\"Fd = k*(x - x‚ÇÄ) ‚Üí Fd = {val['k']}*({val['x']} - {val['x_0']}) = {Fd} N\")\n",
    "    if 'F' in val and 'd' in val and 'Œ∏' in val:\n",
    "        W = val['F'] * val['d'] * math.cos(math.radians(val['Œ∏']))\n",
    "        pasos.append(f\"W = F*d*cos(Œ∏) ‚Üí W = {val['F']}*{val['d']}*cos({val['Œ∏']}) = {W:.2f} J\")\n",
    "    if 'm' in val and 'v' in val:\n",
    "        K = 0.5 * val['m'] * val['v']**2\n",
    "        pasos.append(f\"K = (1/2)*m*v¬≤ ‚Üí K = 0.5*{val['m']}*{val['v']}¬≤ = {K} J\")\n",
    "    if 'm' in val and 'h' in val:\n",
    "        U = val['m'] * 9.8 * val['h']\n",
    "        pasos.append(f\"U = m*g*h ‚Üí U = {val['m']}*9.8*{val['h']} = {U} J\")\n",
    "    if 'C' in val and 'T' in val and 'T_0' in val and 'm' in val:\n",
    "        Q = val['m'] * val['C'] * (val['T'] - val['T_0'])\n",
    "        pasos.append(f\"Q = m*C*(T - T‚ÇÄ) ‚Üí Q = {val['m']}*{val['C']}*({val['T']} - {val['T_0']}) = {Q} J\")\n",
    "    return pasos\n",
    "\n",
    "opcion = st.selectbox(\"Elige el tipo de problema:\", [\"√Ålgebra\", \"F√≠sica razonada\"])\n",
    "\n",
    "if opcion == \"√Ålgebra\":\n",
    "    expresion = st.text_input(\"Escribe tu ecuaci√≥n (ej: 2*x + 3 = 7):\")\n",
    "    if expresion:\n",
    "        try:\n",
    "            lhs, rhs = expresion.split('=')\n",
    "            lhs = sympify(lhs)\n",
    "            rhs = sympify(rhs)\n",
    "            eq = Eq(lhs, rhs)\n",
    "            sol = solve(eq, x)\n",
    "            st.success(f\"Soluci√≥n: {sol}\")\n",
    "        except Exception as e:\n",
    "            st.error(f\"Formato incorrecto o error: {e}\")\n",
    "\n",
    "elif opcion == \"F√≠sica razonada\":\n",
    "    contexto = st.text_area(\"Describe el problema f√≠sico (ej: Un objeto se lanza a 20 m/s...) :\")\n",
    "    pregunta = st.text_input(\"¬øQu√© quieres saber? (ej: ¬øCu√°l es la velocidad final?)\")\n",
    "    if contexto and pregunta:\n",
    "        if len(contexto.split()) < 5:\n",
    "            st.warning(\"Describe el problema con m√°s detalle para obtener una buena respuesta.\")\n",
    "        else:\n",
    "            try:\n",
    "                with st.spinner(\"Analizando el enunciado...\"):\n",
    "                    respuesta = qa(question=pregunta, context=contexto)\n",
    "                    st.info(f\"Respuesta IA lenguaje: {respuesta['answer']}\")\n",
    "\n",
    "                    st.markdown(\"### üßÆ C√°lculo paso a paso:\")\n",
    "                    datos = extraer_valores(contexto)\n",
    "                    pasos_mru = resolver_mru(datos)\n",
    "                    pasos_mrua = resolver_mrua(datos)\n",
    "                    pasos_extra = resolver_extra(datos)\n",
    "                    for paso in pasos_mru + pasos_mrua + pasos_extra:\n",
    "                        st.write(paso)\n",
    "            except Exception as e:\n",
    "                st.error(f\"Error al usar IA de lenguaje: {e}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
